{
    "api": {
        "version": "0.1",
        "description": "Ring API - REST documentation",
        "license": "GPLv3",
        "url": "https://github.com/sevaivanov/ring-api/",
        "authors": {
            "Seva Ivanov": "seva.ivanov@savoirfairelinux.com",
            "Simon Zeni": "simon.zeni@savoirfairelinux.com"
        },

        "syntax": {
            "todo": {
                "comment": "Unfinished tasks",
                "things": [
                    "specify data_type for json after refactor to stable of server",
                    "write human text explaining this API"
                ]
            },
            ["comment", "comments"]: "Important comment",

            "types": {
                "comments": {
                    "Types are requests supported types",
                    "Responses includes a 'success' and a html 'status' variables"
                },
                "GET": "Get",
                "POST": "Create",
                "PUT": "Update",
                "DELETE": "Delete action"
            },

            "structure": {
                "comments": {
                    "Template explaining the structure of resources with types, values and arguments",
                    "values": {
                        "Not specified implies that you get them from a GET request, see <type2>, i.e. /account/"
                    },
                    "arguments": {
                        "Required that can't be obtained from a GET are listed, see <type4>, i.e. /accounts/<account_id>/message/"
                    }
                },
                "/<resource>/": {
                    "<type1>": "Function name of libring <interface.h>",
                    "<type2>": {
                        "data_type" : "json",
                        "<argument>": "Function name of libring <interface.h>"
                    },
                    "<type3>": {
                        "<argument>": {
                            "<value2>": "Function name of libring <interface.h>",
                            "<value2>": "Function name of libring <interface.h>"
                        }
                    },
                    "<type4>": {
                        ["<argument1>", "<argument2>"]: "Function name of libring <interface.h>"
                    }
                }
            },

            "empty_lines": {
                1: "Resources are under the same root resource",
                2: "Resources are different root resources"
            }
        }
    },

    "/websocket/port/": {
        "GET": "Returns the connection port"
    },

    "/account/": {
       "GET": {
            "type": {
                "SIP": "getAccountTemplate",
                "IAX": "getAccountTemplate",
                "IP2IP": "getAccountTemplate",
                "RING": "getAccountTemplate"
            }
        },
        "POST": {
            "details": "addAccount"
        }
    },

    "/accounts/": {
        "GET": "getAccountList"
    },

    "/accounts/<account_id>/": {
        "DELETE": "removeAccount"
    },

    "/accounts/<account_id>/details/": {
        "GET": {
            "type": {
                "default": "getAccountDetails",
                "volatile": "getVolatileAccountDetails"
            }
        },
        "PUT": {
            "todo": "setAccountDetails"
        }
    },

    "/accounts/<account_id>/ciphers/": {
        "GET": "getSupportedCiphers"
    },

    "/accounts/<account_id>/codecs/": {
        "GET": "getActiveCodecList",
        "PUT": {
            "todo": "setActiveCodecList"
        }
    },

    "/accounts/<account_id>/codecs/<codec_id>/": {
        "GET": "getCodecDetails",
        "PUT": {
            "todo" : "setCodecDetails"
        }
    },

    "/accounts/<account_id>/call/": {
        "POST": {
            "ring_id": "placeCall"
        }
    },

    "/accounts/<account_id>/certificates/<cert_id>/": {
        "GET": {
            "action": {
                "validate": "validateCertificate"
            }
        },
        "PUT": {
            "status": {
                "UNDEFINED": "setCertificateStatus",
                "ALLOWED": "setCertificateStatus",
                "BANNED": "setCertificateStatus"
            }
        }
    },

    "/accounts/<account_id>/message/": {
        "POST": {
            ["ring_id", "mime_type", "message"]: "sendAccountTextMessage"
        }
    },


    "/message/mime_types/": {
        "GET": "todo"
    },

    "/messages/<message_id>/": {
        "GET": "getMessageStatus"
    },


    "/calls/<call_id>/": {
        "PUT": {
            "action": [
                "accept",
                "refuse",
                "hangup",
                "hold",
                "unhold"
            ]
        }
    },


    "/codecs/": {
        "GET": "getCodecList"
    },


    "/crypto/tls/": {
        "GET": {
            "type": {
                "settings": "getTlsDefaultSettings",
                "method": "getSupportedTlsMethod"
            }
        }
    },


    "/certificates/": {
        "GET": "getPinnedCertificates"
    },

    "/certificate/<cert_id>/": {
        "GET": "getCertificateDetails",
        "POST": {
            "comment": "todo: what pin means?",
            "action": {
                "pin": "pinCertificate",
                "pin_remote": "pinRemoteCertificate",
                "unpin": "unpinCertificate"
            }
        }
    },


    "/audio/plugins/": {
        "GET": "getAudioPluginList"
    },


    "/video/devices/": {
        "GET": {
            "type": {
                "all": "getDeviceList",
                "default": "getDefaultDevice"
            }
        },
        "PUT": {
            "type": {
                "default": "setDefaultDevice"
            }
        }
    },

    "/video/<device_name>/settings/": {
        "GET": "getSettings",
        "PUT": {
            "todo": "applySettings"
        }
    },

    "/video/camera/": {
        "GET": "hasCameraStarted",
        "PUT": {
            "action": {
                "start": "startCamera",
                "stop": "stopCamera"
            }
        }
    }
}
